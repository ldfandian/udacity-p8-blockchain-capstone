const truffleAssert = require('../../node_modules/truffle-assertions');

// define a variable to import the <Verifier> or <renamedVerifier> solidity contract generated by Zokrates
var ZokratesSquareVerifier = artifacts.require('Verifier');

const BigNumber = require('../../node_modules/bignumber.js');


/**
 * utils to convert the 0x-(HEX) format data to its decimal value
 */
function getProofData(proofJsonFileContent) {
    return {
        a:  [
                new BigNumber(proofJsonFileContent.proof.a[0], 16).toFixed(),
                new BigNumber(proofJsonFileContent.proof.a[1], 16).toFixed(),
            ],
        b:  [
                [
                    new BigNumber(proofJsonFileContent.proof.b[0][0], 16).toFixed(),
                    new BigNumber(proofJsonFileContent.proof.b[0][1], 16).toFixed(),
                ],
                [
                    new BigNumber(proofJsonFileContent.proof.b[1][0], 16).toFixed(),
                    new BigNumber(proofJsonFileContent.proof.b[1][1], 16).toFixed(),
                ],
            ],
        c:  [
            new BigNumber(proofJsonFileContent.proof.c[0], 16).toFixed(),
            new BigNumber(proofJsonFileContent.proof.c[1], 16).toFixed(),
            ],
        inputs: [
            new BigNumber(proofJsonFileContent.inputs[0], 16).toFixed(),
            new BigNumber(proofJsonFileContent.inputs[1], 16).toFixed(),
            ],
    };
}

const ProofFileContent_9 = require("../../zokrates/proof_square_9/proof.json");
const PROOF_9 = getProofData(ProofFileContent_9);
const ProofFileContent_16 = require("../../zokrates/proof_square_16/proof.json");
const PROOF_16 = getProofData(ProofFileContent_16);

contract('TestZokratesSquareVerifier', accounts => {

    const account_one = accounts[0];
    const account_two = accounts[1];

    describe('test zokrates square verifier', function () {
        beforeEach(async function () { 
            this.contract = await ZokratesSquareVerifier.new({ from: account_one });
        })

        it('Test verification with correct proof', async function () { 
            let txProof9 = await this.contract.verifyTx(PROOF_9.a, PROOF_9.b, PROOF_9.c, PROOF_9.inputs);
            truffleAssert.eventEmitted(txProof9, 'Verified', (ev) => {
                return expect(ev.s).to.deep.equal("Transaction successfully verified.");
            });
        })

        it('Test verification with incorrect proof', async function () {
            let txProofBad;
            
            txProofBad = await this.contract.verifyTx(PROOF_9.a, PROOF_9.b, PROOF_9.c, PROOF_16.inputs);
            truffleAssert.eventNotEmitted(txProofBad, 'Verified', (ev) => {
                return true;
            });
            
            txProofBad = await this.contract.verifyTx(PROOF_9.a, PROOF_9.b, PROOF_16.c, PROOF_9.inputs);
            truffleAssert.eventNotEmitted(txProofBad, 'Verified', (ev) => {
                return true;
            });
        })
    });

})
