const truffleAssert = require('../../node_modules/truffle-assertions');
var proofConfigLib = require('./proofConfig.js');

// define a variable to import the <Verifier> or <renamedVerifier> solidity contract generated by Zokrates
var ZokratesSquareVerifier = artifacts.require('Verifier');

contract('TestZokratesSquareVerifier', accounts => {

    const account_one = accounts[0];

    var proofConfig;

    describe('test zokrates square verifier', function () {
        beforeEach(async function () { 
            this.contract = await ZokratesSquareVerifier.new({ from: account_one });
            proofConfig = await proofConfigLib.config();
        })

        it('Test verification with correct proof', async function () { 
            let txProof9 = await this.contract.verifyTx(
                proofConfig.PROOF_9.a, proofConfig.PROOF_9.b, proofConfig.PROOF_9.c, proofConfig.PROOF_9.inputs);
            truffleAssert.eventEmitted(txProof9, 'Verified', (ev) => {
                return expect(ev.s).to.deep.equal("Transaction successfully verified.");
            });
        })

        it('Test verification with incorrect proof', async function () {
            {
                let txProofBad = await this.contract.verifyTx(
                    proofConfig.PROOF_9.a, proofConfig.PROOF_9.b, proofConfig.PROOF_9.c, proofConfig.PROOF_16.inputs);
                truffleAssert.eventNotEmitted(txProofBad, 'Verified', (ev) => {
                    return true;
                });
            }

            {
                let txProofBad = await this.contract.verifyTx(
                    proofConfig.PROOF_9.a, proofConfig.PROOF_9.b, proofConfig.PROOF_16.c, proofConfig.PROOF_9.inputs);
                truffleAssert.eventNotEmitted(txProofBad, 'Verified', (ev) => {
                    return true;
                });
            }
        })
    });

})
